<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Projects on ftvkyo</title><link>https://www.ftvkyo.me/project/</link><description>Recent content in Projects on ftvkyo</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://www.ftvkyo.me/project/index.xml" rel="self" type="application/rss+xml"/><item><title>Computer Graphics cheatsheet</title><link>https://www.ftvkyo.me/project/cg-cheatsheet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.ftvkyo.me/project/cg-cheatsheet/</guid><description>&lt;h2 id="coordinate-systems">Coordinate systems&lt;/h2>
&lt;h3 id="handedness">Handedness&lt;/h3>
&lt;p>Three-dimensional coordinate systems can be left-handed and right-handed.&lt;/p>
&lt;p>How to remember which one is which:&lt;/p>
&lt;ol>
&lt;li>Use your corresponding hand&lt;/li>
&lt;li>Form an &lt;code>L&lt;/code> shape with the thumb and the index finger&lt;/li>
&lt;li>Form an &lt;code>L&lt;/code> shape with the index finger and the middle finger
(make your middle finger perpendicular to the surface of your palm)&lt;/li>
&lt;li>Assign the positive X, positive Y and positive Z directions to the fingers in the following order: the thumb, then the index finger, then the middle finger&lt;/li>
&lt;/ol>
&lt;p>Different grapics APIs may use differently handed coordinate systems.&lt;/p></description></item><item><title>Home floorplans</title><link>https://www.ftvkyo.me/project/floorplans/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.ftvkyo.me/project/floorplans/</guid><description>&lt;h2 id="russia-19992019">Russia, 1999–2019&lt;/h2>
&lt;p>Dates are approximate.&lt;/p>
&lt;aside>
&lt;p>Missing data:&lt;/p>
&lt;ol>
&lt;li>Chernogolovka&lt;/li>
&lt;li>Moscow, Yuzhnoye Butovo&lt;/li>
&lt;li>Moscow, Severnoye Butovo&lt;/li>
&lt;/ol>
&lt;p>To be added:&lt;/p>
&lt;ol start="4">
&lt;li>Korolyov, 2005&lt;/li>
&lt;li>Moscow, Kurjanovo, 2006&lt;/li>
&lt;li>Moscow, Severnoye Izmaylovo, 2007&lt;/li>
&lt;li>Chernogolovka x2, 2008–2013&lt;/li>
&lt;li>Moscow, Severnoye Izmaylovo, 2013–2014&lt;/li>
&lt;li>Shchyolkovo, 2014–2016&lt;/li>
&lt;li>Chernogolovka (back), 2016–2017&lt;/li>
&lt;li>Dolgoprudny x3, 2017–2019&lt;/li>
&lt;/ol>
&lt;/aside>
&lt;h2 id="asia-20192021">Asia, 2019–2021&lt;/h2>


&lt;figure>&lt;img src="https://www.ftvkyo.me/img/project/floorplans/2020-01-01-Philippines.svg"
 alt="Philippines, January 2020">&lt;figcaption>
 &lt;p>Philippines, January 2020&lt;/p>
 &lt;/figcaption>
&lt;/figure>



&lt;figure>&lt;img src="https://www.ftvkyo.me/img/project/floorplans/2020-09-01-HongKong.svg"
 alt="Hong Kong, September 2020">&lt;figcaption>
 &lt;p>Hong Kong, September 2020&lt;/p>
 &lt;/figcaption>
&lt;/figure>

&lt;aside>
&lt;p>To be added:&lt;/p>
&lt;ol>
&lt;li>Hong Kong, December 2020–August 2021&lt;/li>
&lt;/ol>
&lt;/aside>
&lt;h2 id="uk-2021now">UK, 2021–now&lt;/h2>


&lt;figure>&lt;img src="https://www.ftvkyo.me/img/project/floorplans/2021-09-01-Cambridge.svg"
 alt="Cambridge, September 2021">&lt;figcaption>
 &lt;p>Cambridge, September 2021&lt;/p></description></item><item><title>Lazy keymap</title><link>https://www.ftvkyo.me/project/lazy-keymap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.ftvkyo.me/project/lazy-keymap/</guid><description>&lt;ul>
&lt;li>Github repository: &lt;a href="https://github.com/ftvkyo/lazy-keymap">ftvkyo/lazy-keymap&lt;/a>&lt;/li>
&lt;li>Work started: &lt;em>Dec 5, 2023&lt;/em>
&lt;ul>
&lt;li>Code recreated based on a previous implementation written in Python&lt;/li>
&lt;li>And then again, but with a better approach to getting things done&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="info skills">
 &lt;span>
 &lt;svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
 &lt;path fill="currentColor" d="m6.914 2.741 15.557 15.556-4.243 4.243L2.672 6.983zm-.707-.707L4.174 0 0 4.243l1.965 2.034zm12.821 21.119L24 24l-.918-4.901zM14.461 7.459l.389-.388.707.707.707-.707-.707-.707.707-.707.707.707.708-.708-.707-.706 2.121-2.121 2.121 2.121-4.631 4.631 1.393 1.393L24 4.95 19.092 0l-6.045 6.045zm-4.949 9.193L4.95 21.213l-2.121-2.121.707-.708.707.707.707-.707-.707-.707.707-.707.707.707.707-.707-.707-.707.707-.707.707.707.707-.707-.707-.706.319-.319-1.415-1.415L0 19.092 4.95 24l5.955-5.955zm9.934-11.349a.5.5 0 1 0-.708-.707.5.5 0 0 0 .708.707"/>
&lt;/svg>

 Rust, ZMK, X Keyboard Config, SVG
 &lt;/span>
&lt;/div>



&lt;figure>&lt;img src="https://www.ftvkyo.me/img/project/lazy-keymap/refcard.svg"
 alt="Example reference card for my one of a kind Hovert60 keyboard">&lt;figcaption>
 &lt;p>Example reference card for my one of a kind &lt;a href="https://www.ftvkyo.me/post/devlog-hovert60-02/">Hovert60 keyboard&lt;/a>&lt;/p></description></item><item><title>Milling calculator</title><link>https://www.ftvkyo.me/project/milling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.ftvkyo.me/project/milling/</guid><description>&lt;aside class="warn">
&lt;p>Surface speed presets are &lt;strong>unreliable&lt;/strong>.&lt;/p>
&lt;/aside>
&lt;style>
 #calculator {
 display: grid;
 grid-template-columns: 1fr 2fr;
 gap: 0.5em;
 }

 #calculator label {
 grid-column: 1;
 }

 #calculator input {
 grid-column: 2;
 justify-self: end;

 width: 100%;
 }

 #calculator span {
 white-space: nowrap;
 font-style: italic;
 opacity: 75%;
 }

 #calculator hr {
 grid-column: 1 / 3;

 width: 100%;
 }

 #calculator .buttons {
 grid-column: 1 / 3;

 margin-bottom: 0.5em;

 display: flex;
 justify-content: end;
 flex-wrap: wrap;
 gap: 0.25em;
 }
&lt;/style>


&lt;noscript>
&lt;strong>JavaScript is required.&lt;/strong>
&lt;/noscript>


&lt;script>

function el(key) {
 return document.querySelector("input#" + key);
}

function clearOutputs() {
 el("speed").value = "";
 el("feedXY").value = "";
 el("feedZ").value = "";
 el("stepover").value = "";
 el("stepdown").value = "";
}

function clearEverything() {
 el("diameter").value = "";
 el("flutes").value = "";
 el("feed").value = "";
 el("chipLoad").value = "";

 clearOutputs();
}

function getInput(key) {
 const e = el(key);

 if (e &amp;&amp; e.checkValidity()) {
 const n = Number(e.value);
 if (typeof n === "number" &amp;&amp; !Number.isNaN(n) &amp;&amp; n !== 0) {
 return n;
 }
 }
 return undefined;
}

function update() {
 const diameter = getInput("diameter");
 const flutes = getInput("flutes");
 const feed = getInput("feed");
 const chipLoad = getInput("chipLoad");

 switch (undefined) {
 case diameter:
 case flutes:
 case feed:
 case chipLoad:
 clearOutputs();
 return;
 }

 const speed = 1000 * feed / (Math.PI * diameter);
 const feedXY = speed * flutes * chipLoad;
 const feedZ = feedXY / 2;
 const stepover = diameter * 0.45;
 const stepdown = diameter * 0.45;

 el("speed").value = speed.toFixed(0);
 el("feedXY").value = feedXY.toFixed(0);
 el("feedZ").value = feedZ.toFixed(0);
 el("stepover").value = stepover.toFixed(3);
 el("stepdown").value = stepdown.toFixed(3);
}

function setInput(key, value) {
 const e = el(key);
 e.value = value;
 update();
}

&lt;/script>


&lt;div id="calculator">



&lt;label for="diameter">Tool diameter &lt;span>(mm)&lt;/span>&lt;/label>
&lt;input id="diameter" type="text" inputmode="numeric" pattern="\d*(\.\d*)?" oninput="update()"/>
&lt;div class="buttons">
 &lt;button onclick="setInput('diameter', this.innerText)">1&lt;/button>
 &lt;button onclick="setInput('diameter', this.innerText)">1.5&lt;/button>
 &lt;button onclick="setInput('diameter', this.innerText)">2&lt;/button>
 &lt;button onclick="setInput('diameter', this.innerText)">2.5&lt;/button>
 &lt;button onclick="setInput('diameter', this.innerText)">3&lt;/button>
 &lt;button onclick="setInput('diameter', this.innerText)">4&lt;/button>
 &lt;button onclick="setInput('diameter', this.innerText)">5&lt;/button>
 &lt;button onclick="setInput('diameter', this.innerText)">6&lt;/button>
 &lt;button onclick="setInput('diameter', this.innerText)">7&lt;/button>
 &lt;button onclick="setInput('diameter', this.innerText)">8&lt;/button>
 &lt;button onclick="setInput('diameter', this.innerText)">9&lt;/button>
 &lt;button onclick="setInput('diameter', this.innerText)">10&lt;/button>
&lt;/div>

&lt;label for="flutes">Number of flutes &lt;span>(integer)&lt;/span>&lt;/label>
&lt;input id="flutes" type="text" inputmode="numeric" pattern="\d*" oninput="update()"/>
&lt;div class="buttons">
 &lt;button onclick="setInput('flutes', this.innerText)">1&lt;/button>
 &lt;button onclick="setInput('flutes', this.innerText)">2&lt;/button>
 &lt;button onclick="setInput('flutes', this.innerText)">3&lt;/button>
 &lt;button onclick="setInput('flutes', this.innerText)">4&lt;/button>
&lt;/div>

&lt;label for="feed">Surface speed &lt;span>(m/min)&lt;/span>&lt;/label>
&lt;input id="feed" type="text" inputmode="numeric" pattern="\d*(\.\d*)?" oninput="update()"/>
&lt;div class="buttons">
 &lt;button onclick="setInput('feed', '38.1')">Acrylic (dry)&lt;/button>
 &lt;button onclick="setInput('feed', '60.96')">Aluminium (dry)&lt;/button>
&lt;/div>

&lt;label for="chipLoad">Chip load &lt;span>(mm)&lt;/span>&lt;/label>
&lt;input id="chipLoad" type="text" inputmode="numeric" pattern="\d*(\.\d*)?" oninput="update()"/>
&lt;div class="buttons">
 &lt;button onclick="setInput('chipLoad', this.innerText)">0.025&lt;/button>
 &lt;button onclick="setInput('chipLoad', this.innerText)">0.05&lt;/button>
 &lt;button onclick="setInput('chipLoad', this.innerText)">0.075&lt;/button>
 &lt;button onclick="setInput('chipLoad', this.innerText)">0.1&lt;/button>
 &lt;button onclick="setInput('chipLoad', this.innerText)">0.125&lt;/button>
&lt;/div>

&lt;hr/>



&lt;label for="speed">Spindle speed &lt;span>(RPM)&lt;/span>&lt;/label>
&lt;input id="speed" type="text" readonly/>

&lt;label for="feedXY">Feed XY &lt;span>(mm/min)&lt;/span>&lt;/label>
&lt;input id="feedXY" type="text" readonly/>

&lt;label for="feedZ">Feed Z or plunge &lt;span>(mm/min)&lt;/span>&lt;/label>
&lt;input id="feedZ" type="text" readonly/>

&lt;label for="stepover">Stepover &lt;span>(mm)&lt;/span>&lt;/label>
&lt;input id="stepover" type="text" readonly/>

&lt;label for="stepdown">Stepdown &lt;span>(mm)&lt;/span>&lt;/label>
&lt;input id="stepdown" type="text" readonly/>

&lt;div class="buttons">
 &lt;button onclick="clearEverything()">Clear&lt;/button>
 &lt;button onclick="update()">Update&lt;/button>
&lt;/div>

&lt;hr/>

&lt;/div>

&lt;h2 id="personal-experience">Personal experience&lt;/h2>
&lt;p>There are some settings that worked well for me.&lt;/p></description></item><item><title>Obsidian ftvkyo</title><link>https://www.ftvkyo.me/project/obsidian-ftvkyo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.ftvkyo.me/project/obsidian-ftvkyo/</guid><description>&lt;ul>
&lt;li>Github repository: &lt;a href="https://github.com/ftvkyo/obsidian-ftvkyo">ftvkyo/obsidian-ftvkyo&lt;/a>&lt;/li>
&lt;li>Work started: &lt;em>Jul 23, 2023&lt;/em>
&lt;ul>
&lt;li>Code was migrated from &amp;laquo;Inline plugins&amp;raquo; I made earlier&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="info skills">
 &lt;span>
 &lt;svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
 &lt;path fill="currentColor" d="m6.914 2.741 15.557 15.556-4.243 4.243L2.672 6.983zm-.707-.707L4.174 0 0 4.243l1.965 2.034zm12.821 21.119L24 24l-.918-4.901zM14.461 7.459l.389-.388.707.707.707-.707-.707-.707.707-.707.707.707.708-.708-.707-.706 2.121-2.121 2.121 2.121-4.631 4.631 1.393 1.393L24 4.95 19.092 0l-6.045 6.045zm-4.949 9.193L4.95 21.213l-2.121-2.121.707-.708.707.707.707-.707-.707-.707.707-.707.707.707.707-.707-.707-.707.707-.707.707.707.707-.707-.707-.706.319-.319-1.415-1.415L0 19.092 4.95 24l5.955-5.955zm9.934-11.349a.5.5 0 1 0-.708-.707.5.5 0 0 0 .708.707"/>
&lt;/svg>

 TypeScript (React), Electron, CSS (SASS)
 &lt;/span>
&lt;/div>

&lt;p>I have been using Obsidian for a while (since March 2021).
Finding a good workflow, a good approach to work and study is important for me, and it is an interesting challenge.
This project is the culmination of my efforts.&lt;/p></description></item><item><title>OpenSCAD snippets</title><link>https://www.ftvkyo.me/project/openscad-snippets/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.ftvkyo.me/project/openscad-snippets/</guid><description>&lt;p>For now, the snippets are self-contained.
That implies there may be duplicates of common functions between snippets.
Even worse, the functions with the same names may work differently in different snippets.
And there may be fewer comments than desired.
You&amp;rsquo;ve been warned &lt;code>¯\_(ツ)_/¯&lt;/code>&lt;/p>
&lt;h2 id="wavy-donut">Wavy donut&lt;/h2>
&lt;p>&lt;em>Just why did I do this?&lt;/em>&lt;/p>


&lt;figure>&lt;img src="https://www.ftvkyo.me/img/project/openscad-snippets/wavy-donut-2.webp"
 alt="A render of the wavy donut with 2 waves">&lt;figcaption>
 &lt;p>A render of the wavy donut with 2 waves&lt;/p>
 &lt;/figcaption>
&lt;/figure>

&lt;p>It is implemented using the &lt;code>polyhedron()&lt;/code> OpenSCAD module.
I generate flat slices of the donut, rotate and position them in 3D using &lt;code>pts_rotate3&lt;/code> and &lt;code>pts_translate3&lt;/code>, and then stitch them into a loop in the &lt;code>pts_extrude&lt;/code> module.&lt;/p></description></item><item><title>Tekutonu</title><link>https://www.ftvkyo.me/project/tekutonu/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.ftvkyo.me/project/tekutonu/</guid><description>&lt;ul>
&lt;li>GitHub repository: &lt;a href="https://github.com/ftvkyo/tekutonu">ftvkyo/tekutonu&lt;/a>&lt;/li>
&lt;li>Work started: &lt;em>Oct 14, 2022&lt;/em>&lt;/li>
&lt;li>Work stopped: &lt;em>Nov 20, 2022&lt;/em>&lt;/li>
&lt;li>Timespan: 38 days, &lt;em>17&lt;/em> of them have commits&lt;/li>
&lt;/ul>
&lt;div class="info skills">
 &lt;span>
 &lt;svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
 &lt;path fill="currentColor" d="m6.914 2.741 15.557 15.556-4.243 4.243L2.672 6.983zm-.707-.707L4.174 0 0 4.243l1.965 2.034zm12.821 21.119L24 24l-.918-4.901zM14.461 7.459l.389-.388.707.707.707-.707-.707-.707.707-.707.707.707.708-.708-.707-.706 2.121-2.121 2.121 2.121-4.631 4.631 1.393 1.393L24 4.95 19.092 0l-6.045 6.045zm-4.949 9.193L4.95 21.213l-2.121-2.121.707-.708.707.707.707-.707-.707-.707.707-.707.707.707.707-.707-.707-.707.707-.707.707.707.707-.707-.707-.706.319-.319-1.415-1.415L0 19.092 4.95 24l5.955-5.955zm9.934-11.349a.5.5 0 1 0-.708-.707.5.5 0 0 0 .708.707"/>
&lt;/svg>

 Rust, Vulkan (vulkano.rs)
 &lt;/span>
&lt;/div>

&lt;p>It is not the first time I tried to build a voxel engine.
This time, the primary objective of the project was to learn the basics of Vulkan.&lt;/p></description></item></channel></rss>